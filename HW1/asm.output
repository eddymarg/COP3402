Grammar

    0 $accept: program $end

    1 program: textSection dataSection stackSection ".end"

    2 textSection: ".text" entryPoint asmInstrs

    3 entryPoint: lora

    4 lora: label
    5     | unsignednumsym

    6 asmInstrs: asmInstr
    7          | asmInstrs asmInstr

    8 label: identsym

    9 asmInstr: labelOpt instr eolsym

   10 labelOpt: label ":"
   11         | empty

   12 empty: ε

   13 instr: threeRegInstr
   14      | twoRegInstr
   15      | shiftInstr
   16      | oneRegInstr
   17      | immedArithInstr
   18      | immedBoolInstr
   19      | branchTestInstr
   20      | loadStoreInstr
   21      | jumpInstr
   22      | syscallInstr

   23 threeRegInstr: threeRegOp regsym "," regsym "," regsym

   24 threeRegOp: "ADD"
   25           | "SUB"
   26           | "AND"
   27           | "BOR"
   28           | "NOR"
   29           | "XOR"

   30 twoRegInstr: twoRegOp regsym "," regsym

   31 twoRegOp: "MUL"
   32         | "DIV"

   33 shiftInstr: shiftOp regsym "," regsym "," shift

   34 shiftOp: "SLL"
   35        | "SRL"

   36 shift: unsignednumsym

   37 oneRegInstr: moveHiLoOp regsym
   38            | jrOp regsym

   39 moveHiLoOp: "MFHI"
   40           | "MFLO"

   41 jrOp: "JR"

   42 immedArithInstr: immedArithOp regsym "," regsym "," immed

   43 immedArithOp: "ADDI"

   44 immed: number

   45 number: sign unsignednumsym

   46 sign: "+"
   47     | "-"
   48     | empty

   49 immedBoolInstr: immedBoolOp regsym "," regsym "," unsignednumsym

   50 immedBoolOp: "ANDI"
   51            | "BORI"
   52            | "XORI"

   53 branchTestInstr: branchTest2Op regsym "," regsym "," offset
   54                | branchTest1Op regsym "," offset

   55 branchTest2Op: "BEQ"
   56              | "BNE"

   57 branchTest1Op: "BGEZ"
   58              | "BGTZ"
   59              | "BLEZ"
   60              | "BLTZ"

   61 offset: number

   62 loadStoreInstr: loadStoreOp regsym "," regsym "," offset

   63 loadStoreOp: "LBU"
   64            | "LW"
   65            | "SB"
   66            | "SW"

   67 jumpInstr: jumpOp lora

   68 jumpOp: "JMP"
   69       | "JAL"

   70 syscallInstr: syscallOp

   71 syscallOp: "EXIT"
   72          | "PSTR"
   73          | "PCH"
   74          | "RCH"
   75          | "STRA"
   76          | "NOTR"

   77 dataSection: ".data" staticStartAddr staticDecls

   78 staticStartAddr: unsignednumsym

   79 staticDecls: empty
   80            | staticDecls staticDecl

   81 staticDecl: dataSize identsym initializerOpt eolsym

   82 dataSize: "WORD"

   83 initializerOpt: "=" number
   84               | empty

   85 stackSection: ".stack" stackBottomAddr

   86 stackBottomAddr: unsignednumsym


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    eolsym (258) 9 81
    identsym <ident> (259) 8 81
    unsignednumsym <unsignednum> (260) 5 36 45 49 78 86
    "+" <token> (261) 46
    "-" <token> (262) 47
    "," (263) 23 30 33 42 49 53 54 62
    ".text" <token> (264) 2
    ".data" <token> (265) 77
    ".stack" <token> (266) 85
    ".end" (267) 1
    ":" (268) 10
    "=" <token> (269) 83
    "ADD" <token> (270) 24
    "SUB" <token> (271) 25
    "AND" <token> (272) 26
    "BOR" <token> (273) 27
    "NOR" <token> (274) 28
    "XOR" <token> (275) 29
    "MUL" <token> (276) 31
    "DIV" <token> (277) 32
    "SLL" <token> (278) 34
    "SRL" <token> (279) 35
    "MFHI" <token> (280) 39
    "MFLO" <token> (281) 40
    "JR" <token> (282) 41
    "ADDI" <token> (283) 43
    "ANDI" <token> (284) 50
    "BORI" <token> (285) 51
    "XORI" <token> (286) 52
    "BEQ" <token> (287) 55
    "BGEZ" <token> (288) 57
    "BGTZ" <token> (289) 58
    "BLEZ" <token> (290) 59
    "BLTZ" <token> (291) 60
    "BNE" <token> (292) 56
    "LBU" <token> (293) 63
    "LW" <token> (294) 64
    "SB" <token> (295) 65
    "SW" <token> (296) 66
    "JMP" <token> (297) 68
    "JAL" <token> (298) 69
    "EXIT" <token> (299) 71
    "PSTR" <token> (300) 72
    "PCH" <token> (301) 73
    "RCH" <token> (302) 74
    "STRA" <token> (303) 75
    "NOTR" <token> (304) 76
    regsym <reg> (305) 23 30 33 37 38 42 49 53 54 62
    "WORD" <token> (306) 82


Nonterminals, with rules where they appear

    $accept (52)
        on left: 0
    program <program> (53)
        on left: 1
        on right: 0
    textSection <text_section> (54)
        on left: 2
        on right: 1
    entryPoint <lora> (55)
        on left: 3
        on right: 2
    lora <lora> (56)
        on left: 4 5
        on right: 3 67
    asmInstrs <asm_instrs> (57)
        on left: 6 7
        on right: 2 7
    label <ident> (58)
        on left: 8
        on right: 4 10
    asmInstr <asm_instr> (59)
        on left: 9
        on right: 6 7
    labelOpt <label_opt> (60)
        on left: 10 11
        on right: 9
    empty <empty> (61)
        on left: 12
        on right: 11 48 79 84
    instr <instr> (62)
        on left: 13 14 15 16 17 18 19 20 21 22
        on right: 9
    threeRegInstr <instr> (63)
        on left: 23
        on right: 13
    threeRegOp <token> (64)
        on left: 24 25 26 27 28 29
        on right: 23
    twoRegInstr <instr> (65)
        on left: 30
        on right: 14
    twoRegOp <token> (66)
        on left: 31 32
        on right: 30
    shiftInstr <instr> (67)
        on left: 33
        on right: 15
    shiftOp <token> (68)
        on left: 34 35
        on right: 33
    shift <unsignednum> (69)
        on left: 36
        on right: 33
    oneRegInstr <instr> (70)
        on left: 37 38
        on right: 16
    moveHiLoOp <token> (71)
        on left: 39 40
        on right: 37
    jrOp <token> (72)
        on left: 41
        on right: 38
    immedArithInstr <instr> (73)
        on left: 42
        on right: 17
    immedArithOp <token> (74)
        on left: 43
        on right: 42
    immed <number> (75)
        on left: 44
        on right: 42
    number <number> (76)
        on left: 45
        on right: 44 61 83
    sign <token> (77)
        on left: 46 47 48
        on right: 45
    immedBoolInstr <instr> (78)
        on left: 49
        on right: 18
    immedBoolOp <token> (79)
        on left: 50 51 52
        on right: 49
    branchTestInstr <instr> (80)
        on left: 53 54
        on right: 19
    branchTest2Op <token> (81)
        on left: 55 56
        on right: 53
    branchTest1Op <token> (82)
        on left: 57 58 59 60
        on right: 54
    offset <number> (83)
        on left: 61
        on right: 53 54 62
    loadStoreInstr <instr> (84)
        on left: 62
        on right: 20
    loadStoreOp <token> (85)
        on left: 63 64 65 66
        on right: 62
    jumpInstr <instr> (86)
        on left: 67
        on right: 21
    jumpOp <token> (87)
        on left: 68 69
        on right: 67
    syscallInstr <instr> (88)
        on left: 70
        on right: 22
    syscallOp <token> (89)
        on left: 71 72 73 74 75 76
        on right: 70
    dataSection <data_section> (90)
        on left: 77
        on right: 1
    staticStartAddr <unsignednum> (91)
        on left: 78
        on right: 77
    staticDecls <static_decls> (92)
        on left: 79 80
        on right: 77 80
    staticDecl <static_decl> (93)
        on left: 81
        on right: 80
    dataSize <data_size> (94)
        on left: 82
        on right: 81
    initializerOpt <initializer> (95)
        on left: 83 84
        on right: 81
    stackSection <stack_section> (96)
        on left: 85
        on right: 1
    stackBottomAddr <unsignednum> (97)
        on left: 86
        on right: 85


State 0

    0 $accept: • program $end

    ".text"  shift, and go to state 1

    program      go to state 2
    textSection  go to state 3


State 1

    2 textSection: ".text" • entryPoint asmInstrs

    identsym        shift, and go to state 4
    unsignednumsym  shift, and go to state 5

    entryPoint  go to state 6
    lora        go to state 7
    label       go to state 8


State 2

    0 $accept: program • $end

    $end  shift, and go to state 9


State 3

    1 program: textSection • dataSection stackSection ".end"

    ".data"  shift, and go to state 10

    dataSection  go to state 11


State 4

    8 label: identsym •

    $default  reduce using rule 8 (label)


State 5

    5 lora: unsignednumsym •

    $default  reduce using rule 5 (lora)


State 6

    2 textSection: ".text" entryPoint • asmInstrs

    identsym  shift, and go to state 4

    $default  reduce using rule 12 (empty)

    asmInstrs  go to state 12
    label      go to state 13
    asmInstr   go to state 14
    labelOpt   go to state 15
    empty      go to state 16


State 7

    3 entryPoint: lora •

    $default  reduce using rule 3 (entryPoint)


State 8

    4 lora: label •

    $default  reduce using rule 4 (lora)


State 9

    0 $accept: program $end •

    $default  accept


State 10

   77 dataSection: ".data" • staticStartAddr staticDecls

    unsignednumsym  shift, and go to state 17

    staticStartAddr  go to state 18


State 11

    1 program: textSection dataSection • stackSection ".end"

    ".stack"  shift, and go to state 19

    stackSection  go to state 20


State 12

    2 textSection: ".text" entryPoint asmInstrs •
    7 asmInstrs: asmInstrs • asmInstr

    identsym  shift, and go to state 4

    ".data"   reduce using rule 2 (textSection)
    $default  reduce using rule 12 (empty)

    label     go to state 13
    asmInstr  go to state 21
    labelOpt  go to state 15
    empty     go to state 16


State 13

   10 labelOpt: label • ":"

    ":"  shift, and go to state 22


State 14

    6 asmInstrs: asmInstr •

    $default  reduce using rule 6 (asmInstrs)


State 15

    9 asmInstr: labelOpt • instr eolsym

    "ADD"   shift, and go to state 23
    "SUB"   shift, and go to state 24
    "AND"   shift, and go to state 25
    "BOR"   shift, and go to state 26
    "NOR"   shift, and go to state 27
    "XOR"   shift, and go to state 28
    "MUL"   shift, and go to state 29
    "DIV"   shift, and go to state 30
    "SLL"   shift, and go to state 31
    "SRL"   shift, and go to state 32
    "MFHI"  shift, and go to state 33
    "MFLO"  shift, and go to state 34
    "JR"    shift, and go to state 35
    "ADDI"  shift, and go to state 36
    "ANDI"  shift, and go to state 37
    "BORI"  shift, and go to state 38
    "XORI"  shift, and go to state 39
    "BEQ"   shift, and go to state 40
    "BGEZ"  shift, and go to state 41
    "BGTZ"  shift, and go to state 42
    "BLEZ"  shift, and go to state 43
    "BLTZ"  shift, and go to state 44
    "BNE"   shift, and go to state 45
    "LBU"   shift, and go to state 46
    "LW"    shift, and go to state 47
    "SB"    shift, and go to state 48
    "SW"    shift, and go to state 49
    "JMP"   shift, and go to state 50
    "JAL"   shift, and go to state 51
    "EXIT"  shift, and go to state 52
    "PSTR"  shift, and go to state 53
    "PCH"   shift, and go to state 54
    "RCH"   shift, and go to state 55
    "STRA"  shift, and go to state 56
    "NOTR"  shift, and go to state 57

    instr            go to state 58
    threeRegInstr    go to state 59
    threeRegOp       go to state 60
    twoRegInstr      go to state 61
    twoRegOp         go to state 62
    shiftInstr       go to state 63
    shiftOp          go to state 64
    oneRegInstr      go to state 65
    moveHiLoOp       go to state 66
    jrOp             go to state 67
    immedArithInstr  go to state 68
    immedArithOp     go to state 69
    immedBoolInstr   go to state 70
    immedBoolOp      go to state 71
    branchTestInstr  go to state 72
    branchTest2Op    go to state 73
    branchTest1Op    go to state 74
    loadStoreInstr   go to state 75
    loadStoreOp      go to state 76
    jumpInstr        go to state 77
    jumpOp           go to state 78
    syscallInstr     go to state 79
    syscallOp        go to state 80


State 16

   11 labelOpt: empty •

    $default  reduce using rule 11 (labelOpt)


State 17

   78 staticStartAddr: unsignednumsym •

    $default  reduce using rule 78 (staticStartAddr)


State 18

   77 dataSection: ".data" staticStartAddr • staticDecls

    $default  reduce using rule 12 (empty)

    empty        go to state 81
    staticDecls  go to state 82


State 19

   85 stackSection: ".stack" • stackBottomAddr

    unsignednumsym  shift, and go to state 83

    stackBottomAddr  go to state 84


State 20

    1 program: textSection dataSection stackSection • ".end"

    ".end"  shift, and go to state 85


State 21

    7 asmInstrs: asmInstrs asmInstr •

    $default  reduce using rule 7 (asmInstrs)


State 22

   10 labelOpt: label ":" •

    $default  reduce using rule 10 (labelOpt)


State 23

   24 threeRegOp: "ADD" •

    $default  reduce using rule 24 (threeRegOp)


State 24

   25 threeRegOp: "SUB" •

    $default  reduce using rule 25 (threeRegOp)


State 25

   26 threeRegOp: "AND" •

    $default  reduce using rule 26 (threeRegOp)


State 26

   27 threeRegOp: "BOR" •

    $default  reduce using rule 27 (threeRegOp)


State 27

   28 threeRegOp: "NOR" •

    $default  reduce using rule 28 (threeRegOp)


State 28

   29 threeRegOp: "XOR" •

    $default  reduce using rule 29 (threeRegOp)


State 29

   31 twoRegOp: "MUL" •

    $default  reduce using rule 31 (twoRegOp)


State 30

   32 twoRegOp: "DIV" •

    $default  reduce using rule 32 (twoRegOp)


State 31

   34 shiftOp: "SLL" •

    $default  reduce using rule 34 (shiftOp)


State 32

   35 shiftOp: "SRL" •

    $default  reduce using rule 35 (shiftOp)


State 33

   39 moveHiLoOp: "MFHI" •

    $default  reduce using rule 39 (moveHiLoOp)


State 34

   40 moveHiLoOp: "MFLO" •

    $default  reduce using rule 40 (moveHiLoOp)


State 35

   41 jrOp: "JR" •

    $default  reduce using rule 41 (jrOp)


State 36

   43 immedArithOp: "ADDI" •

    $default  reduce using rule 43 (immedArithOp)


State 37

   50 immedBoolOp: "ANDI" •

    $default  reduce using rule 50 (immedBoolOp)


State 38

   51 immedBoolOp: "BORI" •

    $default  reduce using rule 51 (immedBoolOp)


State 39

   52 immedBoolOp: "XORI" •

    $default  reduce using rule 52 (immedBoolOp)


State 40

   55 branchTest2Op: "BEQ" •

    $default  reduce using rule 55 (branchTest2Op)


State 41

   57 branchTest1Op: "BGEZ" •

    $default  reduce using rule 57 (branchTest1Op)


State 42

   58 branchTest1Op: "BGTZ" •

    $default  reduce using rule 58 (branchTest1Op)


State 43

   59 branchTest1Op: "BLEZ" •

    $default  reduce using rule 59 (branchTest1Op)


State 44

   60 branchTest1Op: "BLTZ" •

    $default  reduce using rule 60 (branchTest1Op)


State 45

   56 branchTest2Op: "BNE" •

    $default  reduce using rule 56 (branchTest2Op)


State 46

   63 loadStoreOp: "LBU" •

    $default  reduce using rule 63 (loadStoreOp)


State 47

   64 loadStoreOp: "LW" •

    $default  reduce using rule 64 (loadStoreOp)


State 48

   65 loadStoreOp: "SB" •

    $default  reduce using rule 65 (loadStoreOp)


State 49

   66 loadStoreOp: "SW" •

    $default  reduce using rule 66 (loadStoreOp)


State 50

   68 jumpOp: "JMP" •

    $default  reduce using rule 68 (jumpOp)


State 51

   69 jumpOp: "JAL" •

    $default  reduce using rule 69 (jumpOp)


State 52

   71 syscallOp: "EXIT" •

    $default  reduce using rule 71 (syscallOp)


State 53

   72 syscallOp: "PSTR" •

    $default  reduce using rule 72 (syscallOp)


State 54

   73 syscallOp: "PCH" •

    $default  reduce using rule 73 (syscallOp)


State 55

   74 syscallOp: "RCH" •

    $default  reduce using rule 74 (syscallOp)


State 56

   75 syscallOp: "STRA" •

    $default  reduce using rule 75 (syscallOp)


State 57

   76 syscallOp: "NOTR" •

    $default  reduce using rule 76 (syscallOp)


State 58

    9 asmInstr: labelOpt instr • eolsym

    eolsym  shift, and go to state 86


State 59

   13 instr: threeRegInstr •

    $default  reduce using rule 13 (instr)


State 60

   23 threeRegInstr: threeRegOp • regsym "," regsym "," regsym

    regsym  shift, and go to state 87


State 61

   14 instr: twoRegInstr •

    $default  reduce using rule 14 (instr)


State 62

   30 twoRegInstr: twoRegOp • regsym "," regsym

    regsym  shift, and go to state 88


State 63

   15 instr: shiftInstr •

    $default  reduce using rule 15 (instr)


State 64

   33 shiftInstr: shiftOp • regsym "," regsym "," shift

    regsym  shift, and go to state 89


State 65

   16 instr: oneRegInstr •

    $default  reduce using rule 16 (instr)


State 66

   37 oneRegInstr: moveHiLoOp • regsym

    regsym  shift, and go to state 90


State 67

   38 oneRegInstr: jrOp • regsym

    regsym  shift, and go to state 91


State 68

   17 instr: immedArithInstr •

    $default  reduce using rule 17 (instr)


State 69

   42 immedArithInstr: immedArithOp • regsym "," regsym "," immed

    regsym  shift, and go to state 92


State 70

   18 instr: immedBoolInstr •

    $default  reduce using rule 18 (instr)


State 71

   49 immedBoolInstr: immedBoolOp • regsym "," regsym "," unsignednumsym

    regsym  shift, and go to state 93


State 72

   19 instr: branchTestInstr •

    $default  reduce using rule 19 (instr)


State 73

   53 branchTestInstr: branchTest2Op • regsym "," regsym "," offset

    regsym  shift, and go to state 94


State 74

   54 branchTestInstr: branchTest1Op • regsym "," offset

    regsym  shift, and go to state 95


State 75

   20 instr: loadStoreInstr •

    $default  reduce using rule 20 (instr)


State 76

   62 loadStoreInstr: loadStoreOp • regsym "," regsym "," offset

    regsym  shift, and go to state 96


State 77

   21 instr: jumpInstr •

    $default  reduce using rule 21 (instr)


State 78

   67 jumpInstr: jumpOp • lora

    identsym        shift, and go to state 4
    unsignednumsym  shift, and go to state 5

    lora   go to state 97
    label  go to state 8


State 79

   22 instr: syscallInstr •

    $default  reduce using rule 22 (instr)


State 80

   70 syscallInstr: syscallOp •

    $default  reduce using rule 70 (syscallInstr)


State 81

   79 staticDecls: empty •

    $default  reduce using rule 79 (staticDecls)


State 82

   77 dataSection: ".data" staticStartAddr staticDecls •
   80 staticDecls: staticDecls • staticDecl

    "WORD"  shift, and go to state 98

    $default  reduce using rule 77 (dataSection)

    staticDecl  go to state 99
    dataSize    go to state 100


State 83

   86 stackBottomAddr: unsignednumsym •

    $default  reduce using rule 86 (stackBottomAddr)


State 84

   85 stackSection: ".stack" stackBottomAddr •

    $default  reduce using rule 85 (stackSection)


State 85

    1 program: textSection dataSection stackSection ".end" •

    $default  reduce using rule 1 (program)


State 86

    9 asmInstr: labelOpt instr eolsym •

    $default  reduce using rule 9 (asmInstr)


State 87

   23 threeRegInstr: threeRegOp regsym • "," regsym "," regsym

    ","  shift, and go to state 101


State 88

   30 twoRegInstr: twoRegOp regsym • "," regsym

    ","  shift, and go to state 102


State 89

   33 shiftInstr: shiftOp regsym • "," regsym "," shift

    ","  shift, and go to state 103


State 90

   37 oneRegInstr: moveHiLoOp regsym •

    $default  reduce using rule 37 (oneRegInstr)


State 91

   38 oneRegInstr: jrOp regsym •

    $default  reduce using rule 38 (oneRegInstr)


State 92

   42 immedArithInstr: immedArithOp regsym • "," regsym "," immed

    ","  shift, and go to state 104


State 93

   49 immedBoolInstr: immedBoolOp regsym • "," regsym "," unsignednumsym

    ","  shift, and go to state 105


State 94

   53 branchTestInstr: branchTest2Op regsym • "," regsym "," offset

    ","  shift, and go to state 106


State 95

   54 branchTestInstr: branchTest1Op regsym • "," offset

    ","  shift, and go to state 107


State 96

   62 loadStoreInstr: loadStoreOp regsym • "," regsym "," offset

    ","  shift, and go to state 108


State 97

   67 jumpInstr: jumpOp lora •

    $default  reduce using rule 67 (jumpInstr)


State 98

   82 dataSize: "WORD" •

    $default  reduce using rule 82 (dataSize)


State 99

   80 staticDecls: staticDecls staticDecl •

    $default  reduce using rule 80 (staticDecls)


State 100

   81 staticDecl: dataSize • identsym initializerOpt eolsym

    identsym  shift, and go to state 109


State 101

   23 threeRegInstr: threeRegOp regsym "," • regsym "," regsym

    regsym  shift, and go to state 110


State 102

   30 twoRegInstr: twoRegOp regsym "," • regsym

    regsym  shift, and go to state 111


State 103

   33 shiftInstr: shiftOp regsym "," • regsym "," shift

    regsym  shift, and go to state 112


State 104

   42 immedArithInstr: immedArithOp regsym "," • regsym "," immed

    regsym  shift, and go to state 113


State 105

   49 immedBoolInstr: immedBoolOp regsym "," • regsym "," unsignednumsym

    regsym  shift, and go to state 114


State 106

   53 branchTestInstr: branchTest2Op regsym "," • regsym "," offset

    regsym  shift, and go to state 115


State 107

   54 branchTestInstr: branchTest1Op regsym "," • offset

    "+"  shift, and go to state 116
    "-"  shift, and go to state 117

    $default  reduce using rule 12 (empty)

    empty   go to state 118
    number  go to state 119
    sign    go to state 120
    offset  go to state 121


State 108

   62 loadStoreInstr: loadStoreOp regsym "," • regsym "," offset

    regsym  shift, and go to state 122


State 109

   81 staticDecl: dataSize identsym • initializerOpt eolsym

    "="  shift, and go to state 123

    $default  reduce using rule 12 (empty)

    empty           go to state 124
    initializerOpt  go to state 125


State 110

   23 threeRegInstr: threeRegOp regsym "," regsym • "," regsym

    ","  shift, and go to state 126


State 111

   30 twoRegInstr: twoRegOp regsym "," regsym •

    $default  reduce using rule 30 (twoRegInstr)


State 112

   33 shiftInstr: shiftOp regsym "," regsym • "," shift

    ","  shift, and go to state 127


State 113

   42 immedArithInstr: immedArithOp regsym "," regsym • "," immed

    ","  shift, and go to state 128


State 114

   49 immedBoolInstr: immedBoolOp regsym "," regsym • "," unsignednumsym

    ","  shift, and go to state 129


State 115

   53 branchTestInstr: branchTest2Op regsym "," regsym • "," offset

    ","  shift, and go to state 130


State 116

   46 sign: "+" •

    $default  reduce using rule 46 (sign)


State 117

   47 sign: "-" •

    $default  reduce using rule 47 (sign)


State 118

   48 sign: empty •

    $default  reduce using rule 48 (sign)


State 119

   61 offset: number •

    $default  reduce using rule 61 (offset)


State 120

   45 number: sign • unsignednumsym

    unsignednumsym  shift, and go to state 131


State 121

   54 branchTestInstr: branchTest1Op regsym "," offset •

    $default  reduce using rule 54 (branchTestInstr)


State 122

   62 loadStoreInstr: loadStoreOp regsym "," regsym • "," offset

    ","  shift, and go to state 132


State 123

   83 initializerOpt: "=" • number

    "+"  shift, and go to state 116
    "-"  shift, and go to state 117

    $default  reduce using rule 12 (empty)

    empty   go to state 118
    number  go to state 133
    sign    go to state 120


State 124

   84 initializerOpt: empty •

    $default  reduce using rule 84 (initializerOpt)


State 125

   81 staticDecl: dataSize identsym initializerOpt • eolsym

    eolsym  shift, and go to state 134


State 126

   23 threeRegInstr: threeRegOp regsym "," regsym "," • regsym

    regsym  shift, and go to state 135


State 127

   33 shiftInstr: shiftOp regsym "," regsym "," • shift

    unsignednumsym  shift, and go to state 136

    shift  go to state 137


State 128

   42 immedArithInstr: immedArithOp regsym "," regsym "," • immed

    "+"  shift, and go to state 116
    "-"  shift, and go to state 117

    $default  reduce using rule 12 (empty)

    empty   go to state 118
    immed   go to state 138
    number  go to state 139
    sign    go to state 120


State 129

   49 immedBoolInstr: immedBoolOp regsym "," regsym "," • unsignednumsym

    unsignednumsym  shift, and go to state 140


State 130

   53 branchTestInstr: branchTest2Op regsym "," regsym "," • offset

    "+"  shift, and go to state 116
    "-"  shift, and go to state 117

    $default  reduce using rule 12 (empty)

    empty   go to state 118
    number  go to state 119
    sign    go to state 120
    offset  go to state 141


State 131

   45 number: sign unsignednumsym •

    $default  reduce using rule 45 (number)


State 132

   62 loadStoreInstr: loadStoreOp regsym "," regsym "," • offset

    "+"  shift, and go to state 116
    "-"  shift, and go to state 117

    $default  reduce using rule 12 (empty)

    empty   go to state 118
    number  go to state 119
    sign    go to state 120
    offset  go to state 142


State 133

   83 initializerOpt: "=" number •

    $default  reduce using rule 83 (initializerOpt)


State 134

   81 staticDecl: dataSize identsym initializerOpt eolsym •

    $default  reduce using rule 81 (staticDecl)


State 135

   23 threeRegInstr: threeRegOp regsym "," regsym "," regsym •

    $default  reduce using rule 23 (threeRegInstr)


State 136

   36 shift: unsignednumsym •

    $default  reduce using rule 36 (shift)


State 137

   33 shiftInstr: shiftOp regsym "," regsym "," shift •

    $default  reduce using rule 33 (shiftInstr)


State 138

   42 immedArithInstr: immedArithOp regsym "," regsym "," immed •

    $default  reduce using rule 42 (immedArithInstr)


State 139

   44 immed: number •

    $default  reduce using rule 44 (immed)


State 140

   49 immedBoolInstr: immedBoolOp regsym "," regsym "," unsignednumsym •

    $default  reduce using rule 49 (immedBoolInstr)


State 141

   53 branchTestInstr: branchTest2Op regsym "," regsym "," offset •

    $default  reduce using rule 53 (branchTestInstr)


State 142

   62 loadStoreInstr: loadStoreOp regsym "," regsym "," offset •

    $default  reduce using rule 62 (loadStoreInstr)
